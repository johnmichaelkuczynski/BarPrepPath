import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useSendChatMessage, useChatHistory } from "@/hooks/useAI";
import type { LLMProvider, ChatMessage } from "@/types";

interface ChatSidebarProps {
  userId: string;
  selectedProvider: LLMProvider;
}

export function ChatSidebar({ userId, selectedProvider }: ChatSidebarProps) {
  const [message, setMessage] = useState("");
  const scrollRef = useRef<HTMLDivElement>(null);
  
  const { data: chatHistory = [], refetch } = useChatHistory(userId, 20) as { data: ChatMessage[], refetch: () => void };
  const sendMessage = useSendChatMessage();

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [chatHistory]);

  const handleSendMessage = async () => {
    if (!message.trim() || sendMessage.isPending) return;

    const messageToSend = message;
    setMessage("");

    try {
      await sendMessage.mutateAsync({
        userId,
        message: messageToSend,
        provider: selectedProvider,
        context: 'bar-prep',
      });
      refetch();
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };



  const getLLMDisplayName = (provider: LLMProvider) => {
    const names = {
      openai: "OpenAI GPT-4",
      anthropic: "Claude 3 Opus",
      deepseek: "DeepSeek-V2",
      perplexity: "Perplexity"
    };
    return names[provider] || provider;
  };

  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-4">
        <CardTitle className="text-lg">AI Legal Assistant</CardTitle>
        <p className="text-sm text-gray-600">
          Ask questions about law concepts or get study help
        </p>
        <div className="text-xs text-gray-500">
          Powered by {getLLMDisplayName(selectedProvider)}
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col p-0">
        {/* Chat Messages */}
        <ScrollArea className="flex-1 p-4" ref={scrollRef}>
          <div className="space-y-4">
            {chatHistory.length === 0 ? (
              <div className="text-center text-gray-500 py-8">
                <i className="fas fa-comments text-4xl mb-4"></i>
                <p>Start a conversation with your AI tutor!</p>
                <p className="text-sm mt-2">Ask about legal concepts, study strategies, or specific questions.</p>
              </div>
            ) : (
              (chatHistory as ChatMessage[]).slice().reverse().map((chat: ChatMessage) => (
                <div key={chat.id} className="space-y-3">
                  {/* User Message */}
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0">
                      <i className="fas fa-user text-white text-sm"></i>
                    </div>
                    <div className="flex-1">
                      <p className="text-sm text-gray-900">{chat.message}</p>
                      <p className="text-xs text-gray-500 mt-1">
                        {new Date(chat.createdAt).toLocaleTimeString()}
                      </p>
                    </div>
                  </div>

                  {/* AI Response */}
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                      <i className="fas fa-robot text-gray-600 text-sm"></i>
                    </div>
                    <div className="flex-1">
                      <div className="bg-gray-100 rounded-lg p-3">
                        <div className="text-sm text-gray-900 whitespace-pre-wrap">
                          {chat.response}
                        </div>
                      </div>
                      <p className="text-xs text-gray-500 mt-1">
                        {new Date(chat.createdAt).toLocaleTimeString()} â€¢ 
                        Generated by {getLLMDisplayName(chat.llmProvider)}
                      </p>
                    </div>
                  </div>
                </div>
              ))
            )}
            
            {sendMessage.isPending && (
              <div className="flex items-start space-x-3">
                <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                  <i className="fas fa-robot text-gray-600 text-sm"></i>
                </div>
                <div className="flex-1">
                  <div className="bg-gray-100 rounded-lg p-3">
                    <div className="flex items-center space-x-2">
                      <i className="fas fa-spinner fa-spin"></i>
                      <span className="text-sm text-gray-600">Thinking...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        {/* Chat Input */}
        <div className="p-4 border-t border-gray-200">
          <div className="flex space-x-2">
            <Input
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask about law concepts, study strategies..."
              className="flex-1"
              disabled={sendMessage.isPending}
            />
            <Button
              onClick={handleSendMessage}
              disabled={!message.trim() || sendMessage.isPending}
              className="bg-primary hover:bg-blue-700"
            >
              <i className="fas fa-paper-plane"></i>
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
