import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useSendChatMessage, useChatHistory, useClearChatHistory } from "@/hooks/useAI";
import type { LLMProvider, ChatMessage } from "@/types";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";

interface ChatSidebarProps {
  userId: string;
  selectedProvider: LLMProvider;
}

export function ChatSidebar({ userId, selectedProvider }: ChatSidebarProps) {
  const [message, setMessage] = useState("");
  const scrollRef = useRef<HTMLDivElement>(null);
  
  const { data: chatHistory = [], refetch } = useChatHistory(userId, 20) as { data: ChatMessage[], refetch: () => void };
  const sendMessage = useSendChatMessage();
  const clearHistory = useClearChatHistory();

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [chatHistory]);

  const handleSendMessage = async () => {
    if (!message.trim() || sendMessage.isPending) return;

    const messageToSend = message;
    setMessage("");

    try {
      await sendMessage.mutateAsync({
        userId,
        message: messageToSend,
        provider: selectedProvider,
        context: 'bar-prep',
      });
      refetch();
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };



  const getLLMDisplayName = (provider: LLMProvider) => {
    const names = {
      openai: "Zhi 1",
      anthropic: "Zhi 2",
      deepseek: "Zhi 3", 
      perplexity: "Zhi 4"
    };
    return names[provider] || provider;
  };

  const downloadAsText = (content: string, question: string, filename: string) => {
    const fullContent = `Question: ${question}\n\nAnswer:\n${content}\n\nGenerated by AI Legal Assistant`;
    const blob = new Blob([fullContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${filename}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const downloadAsWord = (content: string, question: string, filename: string) => {
    const fullContent = `Question: ${question}\n\nAnswer:\n${content}\n\nGenerated by AI Legal Assistant`;
    const blob = new Blob([fullContent], { type: 'application/msword' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${filename}.doc`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const downloadAsPDF = async (content: string, question: string, filename: string) => {
    // For PDF generation, we'll create a simple HTML-to-PDF approach
    const fullContent = `
      <html>
        <head><title>AI Legal Assistant Response</title></head>
        <body style="font-family: Arial, sans-serif; padding: 20px; line-height: 1.6;">
          <h2>Question:</h2>
          <p style="background: #f5f5f5; padding: 10px; border-radius: 5px;">${question}</p>
          <h2>Answer:</h2>
          <div style="white-space: pre-wrap;">${content}</div>
          <hr style="margin-top: 30px;">
          <p style="color: #666; font-size: 12px;">Generated by AI Legal Assistant</p>
        </body>
      </html>
    `;
    
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(fullContent);
      printWindow.document.close();
      printWindow.focus();
      setTimeout(() => {
        printWindow.print();
        printWindow.close();
      }, 250);
    }
  };

  const downloadEntireExchange = () => {
    if (chatHistory.length === 0) return;
    
    const sortedHistory = (chatHistory as ChatMessage[]).slice().reverse();
    let fullExchange = "AI LEGAL ASSISTANT - COMPLETE CONVERSATION HISTORY\n";
    fullExchange += "=" + "=".repeat(60) + "\n\n";
    
    sortedHistory.forEach((chat, index) => {
      fullExchange += `EXCHANGE ${index + 1}\n`;
      fullExchange += "-".repeat(30) + "\n";
      fullExchange += `Date: ${new Date(chat.createdAt).toLocaleString()}\n`;
      fullExchange += `AI Provider: ${getLLMDisplayName(chat.llmProvider)}\n\n`;
      fullExchange += `QUESTION:\n${chat.message}\n\n`;
      fullExchange += `ANSWER:\n${chat.response}\n\n`;
      fullExchange += "=".repeat(60) + "\n\n";
    });
    
    fullExchange += `Generated by AI Legal Assistant\n`;
    fullExchange += `Total Exchanges: ${sortedHistory.length}\n`;
    fullExchange += `Downloaded: ${new Date().toLocaleString()}`;
    
    const blob = new Blob([fullExchange], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `legal-assistant-full-conversation-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <Card className="h-full flex flex-col">
      <CardHeader className="pb-4">
        <div className="flex justify-between items-start">
          <div className="flex-1">
            <CardTitle className="text-lg">AI Legal Assistant</CardTitle>
            <p className="text-sm text-gray-600">
              Ask questions about law concepts or get study help
            </p>
            <div className="text-xs text-gray-500">
              Powered by Zhi 1
            </div>
          </div>
          <div className="flex space-x-2">
            <Button
              onClick={downloadEntireExchange}
              disabled={chatHistory.length === 0}
              variant="outline"
              size="sm"
            >
              <i className="fas fa-download mr-2"></i>
              Download All
            </Button>
            <Button
              onClick={() => clearHistory.mutate(userId)}
              disabled={clearHistory.isPending || chatHistory.length === 0}
              variant="outline"
              size="sm"
            >
              <i className="fas fa-trash mr-2"></i>
              {clearHistory.isPending ? "Clearing..." : "Clear Chat"}
            </Button>
          </div>
        </div>
      </CardHeader>

      <CardContent className="flex-1 flex flex-col p-0">
        {/* Chat Messages */}
        <ScrollArea className="flex-1 p-4" ref={scrollRef}>
          <div className="space-y-4">
            {chatHistory.length === 0 ? (
              <div className="text-center text-gray-500 py-8">
                <i className="fas fa-comments text-4xl mb-4"></i>
                <p>Start a conversation with your AI tutor!</p>
                <p className="text-sm mt-2">Ask about legal concepts, study strategies, or specific questions.</p>
              </div>
            ) : (
              (chatHistory as ChatMessage[]).slice().reverse().map((chat: ChatMessage) => (
                <div key={chat.id} className="space-y-3">
                  {/* User Message */}
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0">
                      <i className="fas fa-user text-white text-sm"></i>
                    </div>
                    <div className="flex-1">
                      <p className="text-sm text-gray-900">{chat.message}</p>
                      <p className="text-xs text-gray-500 mt-1">
                        {new Date(chat.createdAt).toLocaleTimeString()}
                      </p>
                    </div>
                  </div>

                  {/* AI Response */}
                  <div className="flex items-start space-x-3">
                    <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                      <i className="fas fa-robot text-gray-600 text-sm"></i>
                    </div>
                    <div className="flex-1">
                      <div className="bg-gray-100 rounded-lg p-3 relative group">
                        <div className="text-sm text-gray-900 whitespace-pre-wrap">
                          {chat.response}
                        </div>
                        <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                          <DropdownMenu>
                            <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="sm" className="h-6 w-6 p-0">
                                <i className="fas fa-download text-xs"></i>
                              </Button>
                            </DropdownMenuTrigger>
                            <DropdownMenuContent align="end">
                              <DropdownMenuItem 
                                onClick={() => downloadAsText(chat.response, chat.message, `legal-answer-${chat.id.slice(0,8)}`)}
                              >
                                <i className="fas fa-file-text mr-2"></i>
                                Download as TXT
                              </DropdownMenuItem>
                              <DropdownMenuItem 
                                onClick={() => downloadAsWord(chat.response, chat.message, `legal-answer-${chat.id.slice(0,8)}`)}
                              >
                                <i className="fas fa-file-word mr-2"></i>
                                Download as Word
                              </DropdownMenuItem>
                              <DropdownMenuItem 
                                onClick={() => downloadAsPDF(chat.response, chat.message, `legal-answer-${chat.id.slice(0,8)}`)}
                              >
                                <i className="fas fa-file-pdf mr-2"></i>
                                Download as PDF
                              </DropdownMenuItem>
                            </DropdownMenuContent>
                          </DropdownMenu>
                        </div>
                      </div>
                      <div className="flex justify-between items-center mt-1">
                        <p className="text-xs text-gray-500">
                          {new Date(chat.createdAt).toLocaleTimeString()} • 
                          Generated by {getLLMDisplayName(chat.llmProvider)}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              ))
            )}
            
            {sendMessage.isPending && (
              <div className="flex items-start space-x-3">
                <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0">
                  <i className="fas fa-robot text-gray-600 text-sm"></i>
                </div>
                <div className="flex-1">
                  <div className="bg-gray-100 rounded-lg p-3">
                    <div className="flex items-center space-x-2">
                      <i className="fas fa-spinner fa-spin"></i>
                      <span className="text-sm text-gray-600">Thinking...</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        {/* Chat Input */}
        <div className="p-4 border-t border-gray-200">
          <div className="space-y-3">
            <textarea
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask about legal concepts, study strategies, or specific questions..."
              className="w-full min-h-[400px] p-3 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              disabled={sendMessage.isPending}
            />
            <div className="flex justify-between">
              <Button
                onClick={downloadEntireExchange}
                disabled={chatHistory.length === 0}
                variant="outline"
                className="px-4"
              >
                <i className="fas fa-download mr-2"></i>Download TXT
              </Button>
              <Button
                onClick={handleSendMessage}
                disabled={!message.trim() || sendMessage.isPending}
                className="bg-blue-600 hover:bg-blue-700 px-6"
              >
                {sendMessage.isPending ? (
                  <><i className="fas fa-spinner fa-spin mr-2"></i>Sending...</>
                ) : (
                  <><i className="fas fa-paper-plane mr-2"></i>Send</>
                )}
              </Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
