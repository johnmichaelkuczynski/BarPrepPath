import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Timer } from "@/components/ui/timer";
import { Badge } from "@/components/ui/badge";
import type { Question, LLMProvider, QuestionResponse } from "@/types";

interface QuestionDisplayProps {
  question: Question;
  questionNumber: number;
  totalQuestions: number;
  onSubmitAnswer: (answer: string, timeSpent: number) => void;
  onPrevious?: () => void;
  onSkip?: () => void;
  isSubmitting?: boolean;
  showExplanation?: boolean;
  response?: QuestionResponse;
  isDiagnosticMode?: boolean;
}

export function QuestionDisplay({
  question,
  questionNumber,
  totalQuestions,
  onSubmitAnswer,
  onPrevious,
  onSkip,
  isSubmitting = false,
  showExplanation = false,
  response,
  isDiagnosticMode = false,
}: QuestionDisplayProps) {
  const [selectedAnswer, setSelectedAnswer] = useState("");
  const [startTime] = useState(Date.now());

  const handleSubmit = () => {
    if (!selectedAnswer.trim()) return;
    
    const timeSpent = Math.floor((Date.now() - startTime) / 1000);
    onSubmitAnswer(selectedAnswer, timeSpent);
  };

  // Auto-submit in diagnostic mode when answer is selected
  const handleAnswerChange = (answer: string) => {
    setSelectedAnswer(answer);
    if (isDiagnosticMode && answer.trim()) {
      // Auto-submit in diagnostic mode after short delay
      setTimeout(() => {
        const timeSpent = Math.floor((Date.now() - startTime) / 1000);
        onSubmitAnswer(answer, timeSpent);
      }, 500);
    }
  };

  const getLLMDisplayName = (provider: LLMProvider) => {
    const names = {
      openai: "OpenAI GPT-4",
      anthropic: "Claude 3 Opus",
      deepseek: "DeepSeek-V2",
      perplexity: "Perplexity"
    };
    return names[provider] || provider;
  };

  return (
    <Card className="w-full">
      <CardContent className="p-8">
        <div className="flex items-center justify-between mb-6">
          <Badge variant="default" className="bg-primary text-white">
            Question {questionNumber} of {totalQuestions}
          </Badge>
          <div className="flex items-center space-x-4">
            <Timer initialTime={300} isRunning={!showExplanation} />
            {question.generatedBy && (
              <span className="text-sm text-gray-500">
                Generated by {getLLMDisplayName(question.generatedBy)}
              </span>
            )}
          </div>
        </div>

        {/* Subject Badge */}
        <div className="mb-4">
          <Badge variant="secondary" className="bg-gray-100 text-gray-700">
            {question.subject.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}
          </Badge>
        </div>

        {/* Question Text */}
        <div className="prose max-w-none mb-8">
          <div 
            className="text-lg leading-relaxed whitespace-pre-wrap"
            dangerouslySetInnerHTML={{ __html: question.questionText }}
          />
        </div>

        {/* Answer Input */}
        {!showExplanation && (
          <div className="mb-8">
            {question.type === 'multiple-choice' && question.options ? (
              <RadioGroup value={selectedAnswer} onValueChange={handleAnswerChange}>
                <div className="space-y-4">
                  {question.options.map((option, index) => {
                    const letter = String.fromCharCode(65 + index); // A, B, C, D
                    return (
                      <div key={index} className="flex items-start p-4 border border-gray-200 rounded-lg hover:bg-gray-50">
                        <RadioGroupItem value={letter} id={`option-${index}`} className="mt-1 mr-4" />
                        <Label htmlFor={`option-${index}`} className="flex-1 cursor-pointer">
                          <span className="ml-2">{option}</span>
                        </Label>
                      </div>
                    );
                  })}
                </div>
              </RadioGroup>
            ) : (
              <Textarea
                value={selectedAnswer}
                onChange={(e) => setSelectedAnswer(e.target.value)}
                placeholder={question.type === 'essay' 
                  ? "Write your essay response here. Be thorough in your analysis and cite relevant legal principles..."
                  : "Write your short answer here..."
                }
                rows={question.type === 'essay' ? 15 : 8}
                className="w-full"
              />
            )}
          </div>
        )}

        {/* Explanation (shown after submission) */}
        {showExplanation && response && (
          <div className="mb-8 p-6 bg-blue-50 border border-blue-200 rounded-lg">
            <h4 className="font-semibold text-gray-900 mb-4">
              {response.isCorrect ? (
                <span className="text-green-600">
                  <i className="fas fa-check-circle mr-2"></i>
                  Correct Answer
                </span>
              ) : (
                <span className="text-red-600">
                  <i className="fas fa-times-circle mr-2"></i>
                  Incorrect Answer
                </span>
              )}
            </h4>
            
            {response.correctAnswer && (
              <div className="mb-4">
                <strong>Correct Answer:</strong> {response.correctAnswer}
              </div>
            )}
            
            <div className="mb-4">
              <strong>Your Answer:</strong> {response.userAnswer}
            </div>
            
            <div className="mb-4">
              <strong>Explanation:</strong>
              <div className="mt-2 whitespace-pre-wrap">{response.explanation}</div>
            </div>

            {response.aiGrading && (
              <div>
                <strong>AI Grading:</strong>
                <div className="mt-2">
                  <div>Score: {response.aiGrading.score}/100</div>
                  {response.aiGrading.strengths?.length > 0 && (
                    <div className="mt-2">
                      <strong>Strengths:</strong>
                      <ul className="list-disc list-inside ml-4">
                        {response.aiGrading.strengths.map((strength: string, index: number) => (
                          <li key={index}>{strength}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                  {response.aiGrading.improvements?.length > 0 && (
                    <div className="mt-2">
                      <strong>Areas for Improvement:</strong>
                      <ul className="list-disc list-inside ml-4">
                        {response.aiGrading.improvements.map((improvement: string, index: number) => (
                          <li key={index}>{improvement}</li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            )}

            <div className="mt-4 text-sm text-gray-500">
              Graded by {getLLMDisplayName(response.llmProvider)}
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex justify-between">
          <Button
            variant="outline"
            onClick={onPrevious}
            disabled={questionNumber === 1 || isSubmitting}
          >
            <i className="fas fa-arrow-left mr-2"></i>
            Previous
          </Button>
          
          <div className="space-x-4">
            {!showExplanation && onSkip && (
              <Button variant="outline" onClick={onSkip} disabled={isSubmitting}>
                Skip
              </Button>
            )}
            
            {!showExplanation && !isDiagnosticMode ? (
              <Button
                onClick={handleSubmit}
                disabled={!selectedAnswer.trim() || isSubmitting}
                className="bg-primary hover:bg-blue-700"
              >
                {isSubmitting ? (
                  <>
                    <i className="fas fa-spinner fa-spin mr-2"></i>
                    Submitting...
                  </>
                ) : (
                  "Submit Answer"
                )}
              </Button>
            ) : showExplanation ? (
              <Button
                onClick={() => window.location.reload()}
                className="bg-primary hover:bg-blue-700"
              >
                Continue
              </Button>
            ) : null}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
